{"version":3,"sources":["../node_modules/@larva.io/webcomponents/dist/esm/lar-range.entry.js"],"names":["LarvaRangeNode","hostRef","registerInstance","this","output","createEvent","request","icon","color","disableQuickActions","log","checked","value","step","min","max","loading","el","shadowRoot","node","querySelector","emit","data","a","error","Boolean","parseFloat","isNaN","console","JSON","stringify","handleBlur","h","String","hideTitles","supTitle","mainTitle","subTitle","colorModal","colorInputs","colorIconSmall","class","size","onClick","handleChangeToggle","expand","t","orientation","onLarChange","ev","handleChange","detail","onLarBlur","slot","getElement","style"],"mappings":"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","file":"static/js/34.e12912fc.chunk.js","sourcesContent":["import { r as registerInstance, c as createEvent, h, g as getElement } from './index-0f1831ce.js';\n\nconst rangeCss = \".center{text-align:center}.center lar-button{margin-bottom:0.5rem}\";\n\nconst LarvaRangeNode = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.output = createEvent(this, \"output\", 7);\n    this.request = createEvent(this, \"request\", 7);\n    /////// LarvaNode base properties\n    /**\n     * Component main icon\n     */\n    this.icon = 'security';\n    /**\n     * The color to use from your application's color palette.\n     * Detrouble options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\n     */\n    this.color = 'primary';\n    /**\n     * Disable quck actions\n     */\n    this.disableQuickActions = false;\n    /**\n     * Is logging for this component enabled (lar-log subcomponent loaded)\n     */\n    this.log = false;\n    /////// LarvaNode base properties and events - end\n    this.checked = false;\n    this.value = 0;\n    this.step = 1;\n    this.min = 0;\n    this.max = 100;\n    this.loading = true;\n  }\n  componentDidLoad() {\n    const el = this.el.shadowRoot || this.el;\n    this.node = el.querySelector('lar-node');\n    this.output.emit({}); // getFullState\n  }\n  /**\n   * Larva error input\n   */\n  async error(data) {\n    if (this.node) {\n      this.node.error(data);\n    }\n    this.loading = false;\n    // revert last switch back if error response\n    this.checked = !this.checked;\n  }\n  changeToggle() {\n    this.checked = Boolean(this.value);\n  }\n  /**\n   * Larva input message\n   */\n  async input(data) {\n    let value = parseFloat(data.value);\n    if (isNaN(value)) {\n      console.error(`lar-range receuived invalid message: ${JSON.stringify(data)}`);\n      value = 0;\n    }\n    if (data.step) {\n      const step = parseFloat(data.step);\n      this.step = isNaN(step) ? this.step : step;\n    }\n    if (data.min) {\n      const min = parseFloat(data.min);\n      this.min = isNaN(min) ? this.min : min;\n    }\n    if (data.max) {\n      const max = parseFloat(data.max);\n      this.max = isNaN(max) ? this.max : max;\n    }\n    this.value = value;\n    this.loading = false;\n  }\n  handleChange(value) {\n    this.value = value;\n  }\n  handleChangeToggle(value) {\n    if (value === this.checked) {\n      return;\n    }\n    if (value) {\n      this.value = this.max;\n    }\n    else {\n      this.value = this.min;\n    }\n    this.handleBlur();\n  }\n  handleBlur() {\n    if (!isNaN(this.value) && this.loading === false) {\n      this.loading = true;\n      this.output.emit(this.value);\n    }\n  }\n  render() {\n    return [\n      h(\"lar-node\", { value: String(this.value || 0), hideTitles: this.hideTitles, icon: this.icon, color: this.color, supTitle: this.supTitle, mainTitle: this.mainTitle, subTitle: this.subTitle, colorModal: this.colorModal, colorInputs: this.colorInputs, colorIconSmall: this.colorIconSmall, loading: this.loading, log: this.log }, h(\"div\", { class: \"center\" }, h(\"lar-button\", { size: \"small\", onClick: () => this.handleChangeToggle(!this.checked), color: this.colorInputs || this.color, expand: \"block\" }, h(\"lar-translate\", { t: this.checked ? 'onoff.switchoff' : 'onoff.switchon' })), h(\"br\", null), h(\"lar-slider\", { orientation: \"vertical\", onLarChange: ev => this.handleChange(ev.detail.value), onLarBlur: () => this.handleBlur(), value: this.value, color: this.colorInputs || this.color, min: this.min, step: this.step, max: this.max })), this.disableQuickActions === false &&\n        h(\"lar-toggle\", { slot: \"titles\", onLarChange: ev => this.handleChangeToggle(ev.detail.checked), checked: this.checked, color: this.colorInputs || this.color }))\n    ];\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"value\": [\"changeToggle\"]\n  }; }\n};\nLarvaRangeNode.style = rangeCss;\n\nexport { LarvaRangeNode as lar_range };\n"],"sourceRoot":""}
{"version":3,"sources":["../node_modules/@larva.io/webcomponents-cognito-login/dist/esm/lar-cognito-login.entry.js","../node_modules/@larva.io/webcomponents-cognito-login/dist/esm/types-2fd4e977.js"],"names":["CognitoLogin","hostRef","registerInstance","this","loginDone","createEvent","loginError","loading","back","loginText","verifyText","backText","forgetPasswordText","continueText","changeText","haveCodeText","sendCodeText","twoStepVerificationText","passwsordChangeRequiredText","newPasswordText","confirmPasswordText","passwordText","usernameText","verificationText","codeText","enterCoreText","submitButtonColor","backButtonColor","showForgotPasswordLink","showBack","disableUsername","cognitoUsernameAttribute","state","LoginState","USER_LOGIN","loadingState","verifyMethod","usernameInternal","mfaCode","verifyCode","passwordFirst","passwordSecond","password","newValue","a","username","emit","setLoading","Auth","signIn","user","challengeName","MFA","NEW_PASSWORD","checkUser","console","error","code","forgotPassword","data","CodeDeliveryDetails","PASSWORD_RECOVERY_PASSWORD","Error","message","verifyCurrentUserAttribute","VERIFICATION_CODE","verifyCurrentUserAttributeSubmit","confirmSignIn","currentAuthenticatedUser","completeNewPassword","_b","_a","challengeParam","requiredAttributes","signOut","login","verifiedContact","Object","keys","unverified","length","unverifiedItems","VERIFICATION","map","key","h","label","value","checked","onChange","event","target","onSubmit","e","preventDefault","type","disabled","onUsernameInput","autocomplete","onInput","color","onClick","undefined","href","changeState","onRecoveryError","detail","onRecoveryDone","onBack","stopPropagation","mfaVerification","changePassword","sendVerificationCode","renderVerifyRadios","tryVerificationCode","renderState","style"],"mappings":"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","file":"static/js/22.33c105e0.chunk.js","sourcesContent":["import { r as registerInstance, c as createEvent, h } from './index-5d998995.js';\nimport { A as Auth } from './Auth-19d9fec4.js';\nimport { L as LoginState } from './types-2fd4e977.js';\n\nconst cognitoLoginCss = \".sc-lar-cognito-login-h{display:block;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;background-color:transparent;color:var(--lar-text-color, #fff);font-family:var(--lar-font-family, inherit);display:block;position:relative !important;margin:0 !important;padding:0 !important;-webkit-overflow-scrolling:touch;will-change:scroll-position;-ms-scroll-chaining:none;overscroll-behavior:contain;overflow:auto}lar-cognito-button.sc-lar-cognito-login:first-of-type{display:block;margin-top:1rem}p.sc-lar-cognito-login{text-align:center}\";\n\nconst CognitoLogin = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.loginDone = createEvent(this, \"loginDone\", 7);\n    this.loginError = createEvent(this, \"loginError\", 7);\n    this.loading = createEvent(this, \"loading\", 7);\n    this.back = createEvent(this, \"back\", 7);\n    this.loginText = 'Login';\n    this.verifyText = 'Verify';\n    this.backText = 'Back';\n    this.forgetPasswordText = 'Forgot password';\n    this.continueText = 'Continue';\n    this.changeText = 'Change';\n    this.haveCodeText = 'I already have a code';\n    this.sendCodeText = 'Send code';\n    this.twoStepVerificationText = 'Please enter code you received via sms or generated by mobile application';\n    this.passwsordChangeRequiredText = 'Password change required';\n    this.newPasswordText = 'New Password';\n    this.confirmPasswordText = 'Confirm Password';\n    this.passwordText = 'Password';\n    this.usernameText = 'Username';\n    this.verificationText = 'Your account needs to be verified';\n    this.codeText = 'Code';\n    this.enterCoreText = 'Please enter code and new password. Code sent to:';\n    this.submitButtonColor = 'primary';\n    this.backButtonColor = 'dark';\n    this.showForgotPasswordLink = true;\n    this.showBack = false;\n    this.disableUsername = false;\n    /**\n     * Cognito Username Atttribute\n     */\n    this.cognitoUsernameAttribute = 'any';\n    this.state = LoginState.USER_LOGIN;\n    this.loadingState = false;\n    this.verifyMethod = 'email';\n    this.usernameInternal = '';\n    this.mfaCode = '';\n    this.verifyCode = '';\n    this.passwordFirst = '';\n    this.passwordSecond = '';\n    this.password = '';\n  }\n  updateUsername(newValue) {\n    // tslint:disable-next-line: strict-boolean-conditions\n    if (newValue) {\n      this.usernameInternal = newValue;\n    }\n  }\n  async componentWillLoad() {\n    // tslint:disable-next-line: strict-boolean-conditions\n    if (this.username) {\n      this.usernameInternal = this.username;\n    }\n  }\n  async isLoading() {\n    return this.loadingState;\n  }\n  setLoading(loading) {\n    this.loadingState = loading;\n    this.loading.emit(loading);\n  }\n  async login() {\n    try {\n      this.setLoading(true);\n      // tslint:disable-next-line: strict-boolean-conditions\n      if (!this.usernameInternal || !this.password) {\n        this.loginError.emit('Incorrect username or password.');\n        return;\n      }\n      this.user = await Auth.signIn(this.usernameInternal, this.password);\n      const { challengeName } = this.user;\n      if (challengeName === 'SMS_MFA' || challengeName === 'SOFTWARE_TOKEN_MFA') {\n        this.state = LoginState.MFA;\n      }\n      else if (challengeName === 'NEW_PASSWORD_REQUIRED') {\n        this.state = LoginState.NEW_PASSWORD;\n      }\n      else {\n        await this.checkUser();\n      }\n    }\n    catch (err) {\n      // tslint:disable-next-line: no-console\n      console.error(err);\n      if (err.code === 'PasswordResetRequiredException') {\n        // start the recovery procedure\n        try {\n          this.loginError.emit(`Account password reset requred`);\n          const data = await Auth.forgotPassword(this.usernameInternal);\n          if (data && data.CodeDeliveryDetails) {\n            this.state = LoginState.PASSWORD_RECOVERY_PASSWORD;\n            return;\n          }\n          else {\n            throw new Error('Failed to start password recovery');\n          }\n        }\n        catch (err) {\n          this.loginError.emit(err.message);\n        }\n        return;\n      }\n      this.loginError.emit(err.message);\n    }\n    finally {\n      this.setLoading(false);\n    }\n  }\n  async sendVerificationCode() {\n    try {\n      this.setLoading(true);\n      await Auth.verifyCurrentUserAttribute(this.verifyMethod);\n      this.state = LoginState.VERIFICATION_CODE;\n    }\n    catch (err) {\n      this.loginError.emit(err.message);\n    }\n    finally {\n      this.setLoading(false);\n    }\n  }\n  async tryVerificationCode() {\n    try {\n      this.setLoading(true);\n      await Auth.verifyCurrentUserAttributeSubmit(this.verifyMethod, this.verifyCode);\n      await this.checkUser();\n    }\n    catch (err) {\n      this.loginError.emit(err.message);\n    }\n    finally {\n      this.setLoading(false);\n    }\n  }\n  async mfaVerification() {\n    try {\n      this.setLoading(true);\n      await Auth.confirmSignIn(this.user, this.mfaCode);\n      await this.checkUser();\n    }\n    catch (err) {\n      this.loginError.emit(err.message);\n    }\n    finally {\n      this.setLoading(false);\n    }\n  }\n  async changePassword() {\n    var _a, _b;\n    try {\n      this.setLoading(true);\n      if (this.passwordFirst !== this.passwordSecond) {\n        throw new Error(`Passwords don't match`);\n      }\n      if (!this.user) {\n        this.user = await Auth.currentAuthenticatedUser();\n        if (!this.user) {\n          throw new Error('Not logged in');\n        }\n      }\n      await Auth.completeNewPassword(this.user, this.passwordFirst, (_b = (_a = this.user) === null || _a === void 0 ? void 0 : _a.challengeParam) === null || _b === void 0 ? void 0 : _b.requiredAttributes);\n      await Auth.signOut();\n      this.password = this.passwordFirst;\n      await this.login();\n    }\n    catch (err) {\n      this.loginError.emit(err.message);\n    }\n    finally {\n      this.setLoading(false);\n    }\n  }\n  async checkUser() {\n    try {\n      if (!this.user) {\n        this.user = await Auth.currentAuthenticatedUser();\n        if (!this.user) {\n          throw new Error('Not logged in');\n        }\n      }\n      const data = await Auth.verifiedContact(this.user);\n      if (data && Object.keys(data.unverified).length === 0) {\n        // Login Successful\n        this.loginDone.emit(this.usernameInternal);\n      }\n      else {\n        this.unverifiedItems = data.unverified;\n        this.state = LoginState.VERIFICATION;\n      }\n    }\n    catch (err) {\n      this.loginError.emit(err.message);\n    }\n  }\n  changeState(state) {\n    this.state = state;\n  }\n  renderVerifyRadios() {\n    if (!this.unverifiedItems) {\n      return;\n    }\n    return Object.keys(this.unverifiedItems).map(key => {\n      return (h(\"lar-cognito-radio\", { key: key, label: this.unverifiedItems[key], value: key, checked: this.verifyMethod === key, onChange: (event) => {\n          if (event.target.checked) {\n            this.verifyMethod = event.target.value;\n          }\n        } }));\n    });\n  }\n  renderState() {\n    switch (this.state) {\n      case LoginState.USER_LOGIN: {\n        return (h(\"form\", { onSubmit: async (e) => { e.preventDefault(); await this.login(); } }, h(\"lar-cognito-username-input\", { label: this.usernameText, type: this.cognitoUsernameAttribute, value: this.usernameInternal, disabled: this.disableUsername, onUsernameInput: (event) => { this.usernameInternal = event.target.value; } }), h(\"lar-cognito-input\", { label: this.passwordText, type: \"password\", autocomplete: \"password\", value: this.password, onInput: (event) => (this.password = event.target.value) }), this.showBack ?\n          h(\"lar-cognito-button\", { type: \"button\", color: this.backButtonColor, onClick: () => this.back.emit(), disabled: this.loadingState }, this.backText) : undefined, h(\"lar-cognito-button\", { type: \"submit\", color: this.submitButtonColor, disabled: this.loadingState || !this.usernameInternal || !this.password }, this.loginText), this.showForgotPasswordLink ?\n          h(\"a\", { href: \"#\", onClick: (event) => { event.preventDefault(); this.changeState(LoginState.PASSWORD_RECOVERY_PASSWORD); } }, this.forgetPasswordText) : undefined));\n      }\n      case LoginState.PASSWORD_RECOVERY_PASSWORD: {\n        return (h(\"lar-cognito-password-recovery\", { onRecoveryError: (event) => this.loginError.emit(event.detail), onRecoveryDone: (event) => this.loginDone.emit(event.detail), showBack: true, backText: this.backText, username: this.usernameInternal, changeText: this.changeText, continueText: this.continueText, newPasswordText: this.newPasswordText, confirmPasswordText: this.confirmPasswordText, passwordText: this.passwordText, usernameText: this.usernameText, enterCoreText: this.enterCoreText, codeText: this.codeText, onBack: e => { e.stopPropagation(); this.changeState(LoginState.USER_LOGIN); }, submitButtonColor: this.submitButtonColor, backButtonColor: this.backButtonColor, cognitoUsernameAttribute: this.cognitoUsernameAttribute, disableUsername: this.disableUsername }));\n      }\n      case LoginState.MFA: {\n        return (h(\"form\", { onSubmit: async (e) => { e.preventDefault(); await this.mfaVerification(); } }, h(\"p\", null, this.twoStepVerificationText), h(\"lar-cognito-input\", { type: \"text\", value: this.mfaCode, onChange: (event) => (this.mfaCode = event.target.value) }), h(\"lar-cognito-button\", { type: \"button\", color: this.backButtonColor, onClick: () => this.changeState(LoginState.USER_LOGIN), disabled: this.loadingState }, this.backText), h(\"lar-cognito-button\", { type: \"submit\", color: this.submitButtonColor, disabled: this.loadingState || !this.mfaCode }, this.verifyText)));\n      }\n      case LoginState.NEW_PASSWORD: {\n        return (h(\"form\", { onSubmit: async (e) => { e.preventDefault(); await this.changePassword(); } }, h(\"p\", null, this.passwsordChangeRequiredText), h(\"lar-cognito-input\", { label: this.newPasswordText, type: \"password\", autocomplete: \"password\", value: this.passwordFirst, onChange: (event) => (this.passwordFirst = event.target.value) }), h(\"lar-cognito-input\", { label: this.confirmPasswordText, type: \"password\", autocomplete: \"password\", value: this.passwordSecond, onChange: (event) => (this.passwordSecond = event.target.value) }), h(\"lar-cognito-button\", { type: \"button\", color: this.backButtonColor, onClick: () => this.changeState(LoginState.USER_LOGIN), disabled: this.loadingState }, this.backText), h(\"lar-cognito-button\", { type: \"submit\", color: this.submitButtonColor, disabled: this.loadingState || !this.passwordFirst || !this.passwordSecond }, this.changeText)));\n      }\n      case LoginState.VERIFICATION: {\n        return (h(\"form\", { onSubmit: async (e) => { e.preventDefault(); await this.sendVerificationCode(); } }, h(\"p\", null, this.verificationText), this.renderVerifyRadios(), h(\"lar-cognito-button\", { type: \"button\", color: this.backButtonColor, onClick: () => this.changeState(LoginState.USER_LOGIN), disabled: this.loadingState }, this.backText), h(\"lar-cognito-button\", { type: \"submit\", color: this.submitButtonColor, disabled: this.loadingState }, this.sendCodeText), h(\"lar-cognito-button\", { type: \"button\", color: this.submitButtonColor, onClick: () => this.changeState(LoginState.VERIFICATION_CODE), disabled: this.loadingState }, this.haveCodeText)));\n      }\n      case LoginState.VERIFICATION_CODE: {\n        return (h(\"form\", { onSubmit: async (e) => { e.preventDefault(); await this.tryVerificationCode(); } }, h(\"p\", null, this.verificationText), h(\"lar-cognito-input\", { label: this.codeText, type: \"text\", value: this.verifyCode, onChange: (event) => (this.verifyCode = event.target.value) }), h(\"lar-cognito-button\", { type: \"button\", color: this.backButtonColor, onClick: () => this.changeState(LoginState.USER_LOGIN) }, this.backText), h(\"lar-cognito-button\", { type: \"submit\", color: this.submitButtonColor, disabled: this.loadingState || !this.verifyCode }, this.verifyText)));\n      }\n      default: {\n        return h(\"div\", null, \"No state\");\n      }\n    }\n  }\n  render() {\n    return h(\"div\", null, this.renderState());\n  }\n  static get watchers() { return {\n    \"username\": [\"updateUsername\"]\n  }; }\n};\nCognitoLogin.style = cognitoLoginCss;\n\nexport { CognitoLogin as lar_cognito_login };\n","var LoginState;\n(function (LoginState) {\n  LoginState[LoginState[\"PASSWORD_RECOVERY_USERNAME\"] = 0] = \"PASSWORD_RECOVERY_USERNAME\";\n  LoginState[LoginState[\"PASSWORD_RECOVERY_PASSWORD\"] = 1] = \"PASSWORD_RECOVERY_PASSWORD\";\n  LoginState[LoginState[\"USER_LOGIN\"] = 2] = \"USER_LOGIN\";\n  LoginState[LoginState[\"NEW_PASSWORD\"] = 3] = \"NEW_PASSWORD\";\n  LoginState[LoginState[\"MFA\"] = 4] = \"MFA\";\n  LoginState[LoginState[\"VERIFICATION\"] = 5] = \"VERIFICATION\";\n  LoginState[LoginState[\"VERIFICATION_CODE\"] = 6] = \"VERIFICATION_CODE\";\n})(LoginState || (LoginState = {}));\n\nexport { LoginState as L };\n"],"sourceRoot":""}
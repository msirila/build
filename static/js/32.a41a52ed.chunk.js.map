{"version":3,"sources":["../node_modules/@larva.io/webcomponents/dist/esm/lar-analog-value.entry.js"],"names":["LarvaAnalogValueNode","hostRef","registerInstance","this","output","createEvent","request","icon","color","log","loading","el","shadowRoot","node","querySelector","emit","data","a","error","text","h","value","hideTitles","supTitle","mainTitle","subTitle","colorModal","colorInputs","colorIconSmall","getElement","style"],"mappings":"mQAIMA,EAAoB,WACxB,WAAYC,GAAS,oBACnBC,YAAiBC,KAAMF,GACvBE,KAAKC,OAASC,YAAYF,KAAM,SAAU,GAC1CA,KAAKG,QAAUD,YAAYF,KAAM,UAAW,GAK5CA,KAAKI,KAAO,WAKZJ,KAAKK,MAAQ,UAIbL,KAAKM,KAAM,EACXN,KAAKO,SAAU,EAnBO,oDAqBxB,WACE,IAAMC,EAAKR,KAAKQ,GAAGC,YAAcT,KAAKQ,GACtCR,KAAKU,KAAOF,EAAGG,cAAc,YAC7BX,KAAKC,OAAOW,SAxBU,0DA6BxB,WAAYC,GAAZ,SAAAC,EAAA,sDACMd,KAAKU,MACPV,KAAKU,KAAKK,MAAMF,GAElBb,KAAKO,SAAU,EAJjB,gDA7BwB,iHAsCxB,WAAYM,GAAZ,SAAAC,EAAA,sDACEd,KAAKgB,KAAOH,EACZb,KAAKO,SAAU,EAFjB,gDAtCwB,2EA0CxB,WACE,MAAO,CACLU,YAAE,WAAY,CAAEC,MAAOlB,KAAKgB,KAAMG,WAAYnB,KAAKmB,WAAYf,KAAMJ,KAAKI,KAAMC,MAAOL,KAAKK,MAAOe,SAAUpB,KAAKoB,SAAUC,UAAWrB,KAAKqB,UAAWC,SAAUtB,KAAKsB,SAAUC,WAAYvB,KAAKuB,WAAYC,YAAaxB,KAAKwB,YAAaC,eAAgBzB,KAAKyB,eAAgBlB,QAASP,KAAKO,QAASD,IAAKN,KAAKM,SA5C9R,cA+CxB,WAAW,OAAOoB,YAAW1B,UA/CL,KAiD1BH,EAAqB8B,MAnDE","file":"static/js/32.a41a52ed.chunk.js","sourcesContent":["import { r as registerInstance, c as createEvent, h, g as getElement } from './index-0f1831ce.js';\n\nconst analogValueCss = \"\";\n\nconst LarvaAnalogValueNode = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.output = createEvent(this, \"output\", 7);\n    this.request = createEvent(this, \"request\", 7);\n    /////// LarvaNode base properties\n    /**\n     * Component main icon\n     */\n    this.icon = 'security';\n    /**\n     * The color to use from your application's color palette.\n     * Detrouble options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\n     */\n    this.color = 'primary';\n    /**\n     * Is logging for this component enabled (lar-log subcomponent loaded)\n     */\n    this.log = false;\n    this.loading = true;\n  }\n  componentDidLoad() {\n    const el = this.el.shadowRoot || this.el;\n    this.node = el.querySelector('lar-node');\n    this.output.emit();\n  }\n  /**\n   * Larva error input\n   */\n  async error(data) {\n    if (this.node) {\n      this.node.error(data);\n    }\n    this.loading = false;\n  }\n  /**\n   * Input Larva event message (see abow)\n   */\n  async input(data) {\n    this.text = data;\n    this.loading = false;\n  }\n  render() {\n    return [\n      h(\"lar-node\", { value: this.text, hideTitles: this.hideTitles, icon: this.icon, color: this.color, supTitle: this.supTitle, mainTitle: this.mainTitle, subTitle: this.subTitle, colorModal: this.colorModal, colorInputs: this.colorInputs, colorIconSmall: this.colorIconSmall, loading: this.loading, log: this.log })\n    ];\n  }\n  get el() { return getElement(this); }\n};\nLarvaAnalogValueNode.style = analogValueCss;\n\nexport { LarvaAnalogValueNode as lar_analog_value };\n"],"sourceRoot":""}
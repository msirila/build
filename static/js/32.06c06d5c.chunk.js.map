{"version":3,"sources":["../node_modules/@larva.io/webcomponents/dist/esm/lar-onoff.entry.js"],"names":["LarvaOnOffNode","hostRef","registerInstance","this","output","createEvent","request","icon","color","disableQuickActions","log","checked","loading","el","shadowRoot","node","querySelector","emit","data","a","error","Boolean","h","value","hideTitles","supTitle","mainTitle","subTitle","colorModal","colorInputs","colorIconSmall","onClick","handleChange","t","slot","onLarChange","ev","detail","getElement","style"],"mappings":"4PAIMA,EAAc,WAClB,WAAYC,GAAS,oBACnBC,YAAiBC,KAAMF,GACvBE,KAAKC,OAASC,YAAYF,KAAM,SAAU,GAC1CA,KAAKG,QAAUD,YAAYF,KAAM,UAAW,GAK5CA,KAAKI,KAAO,WAKZJ,KAAKK,MAAQ,UAIbL,KAAKM,qBAAsB,EAI3BN,KAAKO,KAAM,EAEXP,KAAKQ,SAAU,EACfR,KAAKS,SAAU,EAzBC,oDA2BlB,WACE,IAAMC,EAAKV,KAAKU,GAAGC,YAAcX,KAAKU,GACtCV,KAAKY,KAAOF,EAAGG,cAAc,YAC7Bb,KAAKC,OAAOa,SA9BI,0DAmClB,WAAYC,GAAZ,SAAAC,EAAA,sDACMhB,KAAKY,MACPZ,KAAKY,KAAKK,MAAMF,GAElBf,KAAKS,SAAU,EAEfT,KAAKQ,SAAWR,KAAKQ,QANvB,gDAnCkB,iHA8ClB,WAAYO,GAAZ,SAAAC,EAAA,sDACEhB,KAAKS,SAAU,EACfT,KAAKQ,QAAUU,QAAQH,GAFzB,gDA9CkB,iFAkDlB,SAAaP,GACPR,KAAKQ,UAAYA,IAGrBR,KAAKQ,UAAYA,EACjBR,KAAKS,SAAU,EACfT,KAAKC,OAAOa,OAAOd,KAAKQ,YAxDR,oBA0DlB,WAAS,WACP,MAAO,CACLW,YAAE,WAAY,CAAEC,MAAOpB,KAAKQ,QAAU,WAAa,YAAaa,WAAYrB,KAAKqB,WAAYjB,KAAMJ,KAAKI,KAAMC,MAAOL,KAAKK,MAAOiB,SAAUtB,KAAKsB,SAAUC,UAAWvB,KAAKuB,UAAWC,SAAUxB,KAAKwB,SAAUC,WAAYzB,KAAKyB,WAAYC,YAAa1B,KAAK0B,YAAaC,eAAgB3B,KAAK2B,eAAgBlB,QAAST,KAAKS,QAASF,IAAKP,KAAKO,KAAOY,YAAE,aAAc,CAAES,QAAS,kBAAM,EAAKC,cAAc,EAAKrB,UAAUH,MAAOL,KAAK0B,aAAe1B,KAAKK,OAASc,YAAE,gBAAiB,CAAEW,EAAG9B,KAAKQ,QAAU,kBAAoB,qBAAmD,IAA7BR,KAAKM,qBACvhBa,YAAE,aAAc,CAAEY,KAAM,SAAUC,YAAa,SAAAC,GAAE,OAAI,EAAKJ,aAAaI,EAAGC,OAAO1B,UAAUA,QAASR,KAAKQ,QAASH,MAAOL,KAAK0B,aAAe1B,KAAKK,YA7DtI,cAgElB,WAAW,OAAO8B,YAAWnC,UAhEX,KAkEpBH,EAAeuC,MApEE","file":"static/js/32.06c06d5c.chunk.js","sourcesContent":["import { r as registerInstance, c as createEvent, h, g as getElement } from './index-0f1831ce.js';\n\nconst onoffCss = \"\";\n\nconst LarvaOnOffNode = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.output = createEvent(this, \"output\", 7);\n    this.request = createEvent(this, \"request\", 7);\n    /////// LarvaNode base properties\n    /**\n     * Component main icon\n     */\n    this.icon = 'security';\n    /**\n     * The color to use from your application's color palette.\n     * Detrouble options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\n     */\n    this.color = 'primary';\n    /**\n     * Disable quck actions\n     */\n    this.disableQuickActions = false;\n    /**\n     * Is logging for this component enabled (lar-log subcomponent loaded)\n     */\n    this.log = false;\n    /////// LarvaNode base properties and events - end\n    this.checked = false;\n    this.loading = true;\n  }\n  componentDidLoad() {\n    const el = this.el.shadowRoot || this.el;\n    this.node = el.querySelector('lar-node');\n    this.output.emit();\n  }\n  /**\n   * Larva error input\n   */\n  async error(data) {\n    if (this.node) {\n      this.node.error(data);\n    }\n    this.loading = false;\n    // revert last switch back if error response\n    this.checked = !this.checked;\n  }\n  /**\n   * Larva input message\n   */\n  async input(data) {\n    this.loading = false;\n    this.checked = Boolean(data);\n  }\n  handleChange(checked) {\n    if (this.checked === checked) {\n      return;\n    }\n    this.checked = !!checked;\n    this.loading = true;\n    this.output.emit(!!this.checked);\n  }\n  render() {\n    return [\n      h(\"lar-node\", { value: this.checked ? 'onoff.on' : 'onoff.off', hideTitles: this.hideTitles, icon: this.icon, color: this.color, supTitle: this.supTitle, mainTitle: this.mainTitle, subTitle: this.subTitle, colorModal: this.colorModal, colorInputs: this.colorInputs, colorIconSmall: this.colorIconSmall, loading: this.loading, log: this.log }, h(\"lar-button\", { onClick: () => this.handleChange(!this.checked), color: this.colorInputs || this.color }, h(\"lar-translate\", { t: this.checked ? 'onoff.switchoff' : 'onoff.switchon' })), this.disableQuickActions === false &&\n        h(\"lar-toggle\", { slot: \"titles\", onLarChange: ev => this.handleChange(ev.detail.checked), checked: this.checked, color: this.colorInputs || this.color }))\n    ];\n  }\n  get el() { return getElement(this); }\n};\nLarvaOnOffNode.style = onoffCss;\n\nexport { LarvaOnOffNode as lar_onoff };\n"],"sourceRoot":""}
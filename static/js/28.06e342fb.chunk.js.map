{"version":3,"sources":["../node_modules/@larva.io/webcomponents/dist/esm/lar-debug.entry.js"],"names":["Debug","hostRef","registerInstance","this","output","createEvent","request","icon","color","log","loading","el","shadowRoot","node","querySelector","emit","readInterval","window","setInterval","data","a","error","clearReadInterval","text","undefined","clearInterval","h","hideTitles","supTitle","mainTitle","subTitle","colorModal","colorInputs","colorIconSmall","JSON","stringify","getElement","style"],"mappings":"4PAIMA,EAAK,WACT,WAAYC,GAAS,oBACnBC,YAAiBC,KAAMF,GACvBE,KAAKC,OAASC,YAAYF,KAAM,SAAU,GAC1CA,KAAKG,QAAUD,YAAYF,KAAM,UAAW,GAK5CA,KAAKI,KAAO,WAKZJ,KAAKK,MAAQ,UAIbL,KAAKM,KAAM,EACXN,KAAKO,SAAU,EAnBR,oDAqBT,WAAmB,WACXC,EAAKR,KAAKQ,GAAGC,YAAcT,KAAKQ,GACtCR,KAAKU,KAAOF,EAAGG,cAAc,YAC7BX,KAAKC,OAAOW,OACZZ,KAAKa,aAAeC,OAAOC,aAAY,WACrC,EAAKR,SAAU,EACf,EAAKN,OAAOW,SACX,OA5BI,0DAiCT,WAAYI,GAAZ,SAAAC,EAAA,sDACMjB,KAAKU,MACPV,KAAKU,KAAKQ,MAAMF,GAElBhB,KAAKmB,oBACLnB,KAAKO,SAAU,EALjB,gDAjCS,iHA2CT,WAAYS,GAAZ,SAAAC,EAAA,sDACEjB,KAAKmB,oBACLnB,KAAKO,SAAU,EACfP,KAAKoB,KAAOJ,EAHd,gDA3CS,sFAgDT,gBAC4BK,IAAtBrB,KAAKa,eACPS,cAActB,KAAKa,cACnBb,KAAKa,kBAAeQ,KAnDf,oBAsDT,WACE,MAAO,CACLE,YAAE,WAAY,CAAEnB,KAAMJ,KAAKI,KAAMoB,WAAYxB,KAAKwB,WAAYnB,MAAOL,KAAKK,MAAOoB,SAAUzB,KAAKyB,SAAUC,UAAW1B,KAAK0B,UAAWC,SAAU3B,KAAK2B,SAAUC,WAAY5B,KAAK4B,WAAYC,YAAa7B,KAAK6B,YAAaC,eAAgB9B,KAAK8B,eAAgBxB,IAAKN,KAAKM,IAAKC,QAASP,KAAKO,SAAWgB,YAAE,MAAO,KAAMA,YAAE,MAAO,KAAMQ,KAAKC,UAAUhC,KAAKoB,KAAM,KAAM,SAxDhW,cA2DT,WAAW,OAAOa,YAAWjC,UA3DpB,KA6DXH,EAAMqC,MA/DW","file":"static/js/28.06e342fb.chunk.js","sourcesContent":["import { r as registerInstance, c as createEvent, h, g as getElement } from './index-0f1831ce.js';\n\nconst debugCss = \"\";\n\nconst Debug = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.output = createEvent(this, \"output\", 7);\n    this.request = createEvent(this, \"request\", 7);\n    /////// LarvaNode base properties\n    /**\n     * Component main icon\n     */\n    this.icon = 'security';\n    /**\n     * The color to use from your application's color palette.\n     * Detrouble options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\n     */\n    this.color = 'primary';\n    /**\n     * Is logging for this component enabled (lar-log subcomponent loaded)\n     */\n    this.log = false;\n    this.loading = true;\n  }\n  componentDidLoad() {\n    const el = this.el.shadowRoot || this.el;\n    this.node = el.querySelector('lar-node');\n    this.output.emit();\n    this.readInterval = window.setInterval(() => {\n      this.loading = true;\n      this.output.emit(); // send read again\n    }, 5000);\n  }\n  /**\n   * Larva error input\n   */\n  async error(data) {\n    if (this.node) {\n      this.node.error(data);\n    }\n    this.clearReadInterval();\n    this.loading = false;\n  }\n  /**\n   * Input Larva event message (see abow)\n   */\n  async input(data) {\n    this.clearReadInterval();\n    this.loading = false;\n    this.text = data;\n  }\n  clearReadInterval() {\n    if (this.readInterval !== undefined) {\n      clearInterval(this.readInterval);\n      this.readInterval = undefined;\n    }\n  }\n  render() {\n    return [\n      h(\"lar-node\", { icon: this.icon, hideTitles: this.hideTitles, color: this.color, supTitle: this.supTitle, mainTitle: this.mainTitle, subTitle: this.subTitle, colorModal: this.colorModal, colorInputs: this.colorInputs, colorIconSmall: this.colorIconSmall, log: this.log, loading: this.loading }, h(\"div\", null, h(\"pre\", null, JSON.stringify(this.text, null, 2))))\n    ];\n  }\n  get el() { return getElement(this); }\n};\nDebug.style = debugCss;\n\nexport { Debug as lar_debug };\n"],"sourceRoot":""}
{"version":3,"sources":["../node_modules/@larva.io/webcomponents/dist/esm/lar-inner-range-door.entry.js"],"names":["InnerRangeDoor","hostRef","registerInstance","this","output","createEvent","request","icon","color","allowIndicationAutoColoring","log","alarm","loading","locked","data","a","State","el","shadowRoot","node","querySelector","emit","val","command","doorType","h","value","hideTitles","iconSmall","colorIconSmall","supTitle","mainTitle","subTitle","colorModal","colorInputs","onClick","handleChange","t","getElement","style"],"mappings":"uQAIMA,EAAc,WAClB,WAAYC,GAAS,oBACnBC,YAAiBC,KAAMF,GACvBE,KAAKC,OAASC,YAAYF,KAAM,SAAU,GAC1CA,KAAKG,QAAUD,YAAYF,KAAM,UAAW,GAK5CA,KAAKI,KAAO,OAKZJ,KAAKK,MAAQ,UAIbL,KAAKM,6BAA8B,EAInCN,KAAKO,KAAM,EAEXP,KAAKQ,OAAQ,EACbR,KAAKS,SAAU,EACfT,KAAKU,QAAS,EA1BE,gFA+BlB,WAAYC,GAAZ,SAAAC,EAAA,sDACMD,GAAQA,EAAKE,QACfb,KAAKU,OAAwB,WAAfC,EAAKE,MACnBb,KAAKS,SAAU,GAHnB,gDA/BkB,qFAqClB,WACE,IAAMK,EAAKd,KAAKc,GAAGC,YAAcf,KAAKc,GACtCd,KAAKgB,KAAOF,EAAGG,cAAc,YAC7BjB,KAAKS,SAAU,EACfT,KAAKC,OAAOiB,SAzCI,0BA2ClB,SAAaC,GAEX,OADAnB,KAAKS,SAAU,EACRT,KAAKC,OAAOiB,KAAK,CAAEE,QAA2B,WAAlBpB,KAAKqB,SAAwB,SAAWrB,KAAKU,OAAS,SAAW,WA7CpF,oBA+ClB,WAAS,WACP,MAAO,CACLY,YAAE,WAAY,CAAEC,MAAOvB,KAAKU,OAAS,cAAgB,gBAAiBc,WAAYxB,KAAKwB,WAAYC,UAAWzB,KAAKU,OAAS,OAAS,SAAUgB,eAAgB1B,KAAKM,8BAAgCN,KAAKS,QAAWT,KAAKU,OAAS,UAAY,SAAYV,KAAK0B,eAAgBtB,KAAMJ,KAAKI,KAAMC,MAAOL,KAAKK,MAAOsB,SAAU3B,KAAK2B,SAAUC,UAAW5B,KAAK4B,UAAWC,SAAU7B,KAAK6B,SAAUC,WAAY9B,KAAK8B,WAAYC,YAAa/B,KAAK+B,YAAaxB,IAAKP,KAAKO,IAAKE,QAAST,KAAKS,SAAWa,YAAE,aAAc,CAAEU,QAAS,kBAAM,EAAKC,cAAc,EAAKvB,SAASL,MAAOL,KAAK+B,aAAe/B,KAAKK,OAASiB,YAAE,gBAAiB,CAAEY,EAAqB,WAAlBlC,KAAKqB,SAAwB,qBAAuBrB,KAAKU,OAAS,cAAgB,mBAjD3qB,cAoDlB,WAAW,OAAOyB,YAAWnC,UApDX,KAsDpBH,EAAeuC,MAxDW","file":"static/js/38.912dc9ac.chunk.js","sourcesContent":["import { r as registerInstance, c as createEvent, h, g as getElement } from './index-0f1831ce.js';\n\nconst innerRangeDoorCss = \"\";\n\nconst InnerRangeDoor = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.output = createEvent(this, \"output\", 7);\n    this.request = createEvent(this, \"request\", 7);\n    /////// LarvaNode base properties\n    /**\n     * Component main icon\n     */\n    this.icon = 'door';\n    /**\n     * The color to use from your application's color palette.\n     * Detrouble options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\n     */\n    this.color = 'primary';\n    /**\n     * Allow node indication color automatic change based on feedback/node value. Defaults to false\n     */\n    this.allowIndicationAutoColoring = false;\n    /**\n     * Is logging for this component enabled (lar-log subcomponent loaded)\n     */\n    this.log = false;\n    /////// LarvaNode base properties and events - end\n    this.alarm = false;\n    this.loading = true;\n    this.locked = false;\n  }\n  /**\n   * Larva input message\n   */\n  async input(data) {\n    if (data && data.State) {\n      this.locked = data.State === 'Locked';\n      this.loading = false;\n    }\n  }\n  componentDidLoad() {\n    const el = this.el.shadowRoot || this.el;\n    this.node = el.querySelector('lar-node');\n    this.loading = true;\n    this.output.emit();\n  }\n  handleChange(val) {\n    this.loading = true;\n    return this.output.emit({ command: this.doorType === 'toggle' ? 'toggle' : this.locked ? 'unlock' : 'lock' });\n  }\n  render() {\n    return [\n      h(\"lar-node\", { value: this.locked ? 'door.locked' : 'door.unlocked', hideTitles: this.hideTitles, iconSmall: this.locked ? 'lock' : 'unlock', colorIconSmall: this.allowIndicationAutoColoring && !this.loading ? (this.locked ? 'success' : 'danger') : this.colorIconSmall, icon: this.icon, color: this.color, supTitle: this.supTitle, mainTitle: this.mainTitle, subTitle: this.subTitle, colorModal: this.colorModal, colorInputs: this.colorInputs, log: this.log, loading: this.loading }, h(\"lar-button\", { onClick: () => this.handleChange(!this.locked), color: this.colorInputs || this.color }, h(\"lar-translate\", { t: this.doorType === 'toggle' ? 'Toggle lock/unlock' : this.locked ? 'door.unlock' : 'door.lock' })))\n    ];\n  }\n  get el() { return getElement(this); }\n};\nInnerRangeDoor.style = innerRangeDoorCss;\n\nexport { InnerRangeDoor as lar_inner_range_door };\n"],"sourceRoot":""}
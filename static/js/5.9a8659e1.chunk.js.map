{"version":3,"sources":["../node_modules/@larva.io/webcomponents/dist/esm/index-9f8406fc.js"],"names":["_sPassive","GestureController","this","gestureId","requestedStart","Map","disabledGestures","disabledScroll","Set","config","GestureDelegate","newID","name","priority","disableScroll","opts","BlockerDelegate","disable","gestureName","id","canStart","set","delete","start","maxPriority","forEach","value","Math","max","capturedId","clear","event","CustomEvent","detail","document","dispatchEvent","undefined","get","add","size","body","classList","BACKDROP_NO_SCROLL","remove","isDisabled","disabled","ctrl","captured","capture","release","enableScroll","gesture","disableGesture","enableGesture","unblock","GESTURE_CONTROLLER","addEventListener","el","eventName","callback","listenerOpts","supportsPassive","passive","node","Object","defineProperty","e","getDocument","Document","ownerDocument","createGesture","hasCapturedPan","hasStartedPan","hasFiredStart","isMoveQueued","finalConfig","assign","direction","gesturePriority","maxAngle","threshold","onWillStart","onStart","onEnd","notCaptured","onMove","blurOnStart","type","startX","startY","startTime","currentX","currentY","velocityX","velocityY","deltaX","deltaY","currentTime","data","pan","thresh","radians","PI","isDirX","maxCosine","cos","dirty","isPan","x","y","detect","distance","hypotenuse","sqrt","cosine","isGesture","getDirection","createPanRecognizer","fireOnMove","tryToCapturePan","then","fireOnStart","activeElement","blur","blurActiveElement","reset","pointerUp","ev","tmpHasCaptured","tmpHasFiredStart","calcGestureData","pointerEvents","pointerDown","pointerMove","options","rmTouchStart","rmTouchMove","rmTouchEnd","rmTouchCancel","rmMouseStart","rmMouseMove","rmMouseUp","lastTouchEvent","handleTouchStart","Date","now","handleTouchEnd","handleMouseDown","handleMouseUp","stopTouch","stopMouse","stop","enable","destroy","createPointerEvents","timeStamp","updateDetail","requestAnimationFrame","abortGesture","prevX","prevY","prevT","timeDelta","changedTouches","length","touch","clientX","clientY","pageX","pageY"],"mappings":"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","file":"static/js/5.9a8659e1.chunk.js","sourcesContent":["class GestureController {\n  constructor() {\n    this.gestureId = 0;\n    this.requestedStart = new Map();\n    this.disabledGestures = new Map();\n    this.disabledScroll = new Set();\n  }\n  /**\n   * Creates a gesture delegate based on the GestureConfig passed\n   */\n  createGesture(config) {\n    return new GestureDelegate(this, this.newID(), config.name, config.priority || 0, !!config.disableScroll);\n  }\n  /**\n   * Creates a blocker that will block any other gesture events from firing. Set in the ion-gesture component.\n   */\n  createBlocker(opts = {}) {\n    return new BlockerDelegate(this, this.newID(), opts.disable, !!opts.disableScroll);\n  }\n  start(gestureName, id, priority) {\n    if (!this.canStart(gestureName)) {\n      this.requestedStart.delete(id);\n      return false;\n    }\n    this.requestedStart.set(id, priority);\n    return true;\n  }\n  capture(gestureName, id, priority) {\n    if (!this.start(gestureName, id, priority)) {\n      return false;\n    }\n    const requestedStart = this.requestedStart;\n    let maxPriority = -10000;\n    requestedStart.forEach(value => {\n      maxPriority = Math.max(maxPriority, value);\n    });\n    if (maxPriority === priority) {\n      this.capturedId = id;\n      requestedStart.clear();\n      const event = new CustomEvent('ionGestureCaptured', { detail: { gestureName } });\n      document.dispatchEvent(event);\n      return true;\n    }\n    requestedStart.delete(id);\n    return false;\n  }\n  release(id) {\n    this.requestedStart.delete(id);\n    if (this.capturedId === id) {\n      this.capturedId = undefined;\n    }\n  }\n  disableGesture(gestureName, id) {\n    let set = this.disabledGestures.get(gestureName);\n    if (set === undefined) {\n      set = new Set();\n      this.disabledGestures.set(gestureName, set);\n    }\n    set.add(id);\n  }\n  enableGesture(gestureName, id) {\n    const set = this.disabledGestures.get(gestureName);\n    if (set !== undefined) {\n      set.delete(id);\n    }\n  }\n  disableScroll(id) {\n    this.disabledScroll.add(id);\n    if (this.disabledScroll.size === 1) {\n      document.body.classList.add(BACKDROP_NO_SCROLL);\n    }\n  }\n  enableScroll(id) {\n    this.disabledScroll.delete(id);\n    if (this.disabledScroll.size === 0) {\n      document.body.classList.remove(BACKDROP_NO_SCROLL);\n    }\n  }\n  canStart(gestureName) {\n    if (this.capturedId !== undefined) {\n      // a gesture already captured\n      return false;\n    }\n    if (this.isDisabled(gestureName)) {\n      return false;\n    }\n    return true;\n  }\n  isCaptured() {\n    return this.capturedId !== undefined;\n  }\n  isScrollDisabled() {\n    return this.disabledScroll.size > 0;\n  }\n  isDisabled(gestureName) {\n    const disabled = this.disabledGestures.get(gestureName);\n    if (disabled && disabled.size > 0) {\n      return true;\n    }\n    return false;\n  }\n  newID() {\n    this.gestureId++;\n    return this.gestureId;\n  }\n}\nclass GestureDelegate {\n  constructor(ctrl, id, name, priority, disableScroll) {\n    this.id = id;\n    this.name = name;\n    this.disableScroll = disableScroll;\n    this.priority = priority * 1000000 + id;\n    this.ctrl = ctrl;\n  }\n  canStart() {\n    if (!this.ctrl) {\n      return false;\n    }\n    return this.ctrl.canStart(this.name);\n  }\n  start() {\n    if (!this.ctrl) {\n      return false;\n    }\n    return this.ctrl.start(this.name, this.id, this.priority);\n  }\n  capture() {\n    if (!this.ctrl) {\n      return false;\n    }\n    const captured = this.ctrl.capture(this.name, this.id, this.priority);\n    if (captured && this.disableScroll) {\n      this.ctrl.disableScroll(this.id);\n    }\n    return captured;\n  }\n  release() {\n    if (this.ctrl) {\n      this.ctrl.release(this.id);\n      if (this.disableScroll) {\n        this.ctrl.enableScroll(this.id);\n      }\n    }\n  }\n  destroy() {\n    this.release();\n    this.ctrl = undefined;\n  }\n}\nclass BlockerDelegate {\n  constructor(ctrl, id, disable, disableScroll) {\n    this.id = id;\n    this.disable = disable;\n    this.disableScroll = disableScroll;\n    this.ctrl = ctrl;\n  }\n  block() {\n    if (!this.ctrl) {\n      return;\n    }\n    if (this.disable) {\n      for (const gesture of this.disable) {\n        this.ctrl.disableGesture(gesture, this.id);\n      }\n    }\n    if (this.disableScroll) {\n      this.ctrl.disableScroll(this.id);\n    }\n  }\n  unblock() {\n    if (!this.ctrl) {\n      return;\n    }\n    if (this.disable) {\n      for (const gesture of this.disable) {\n        this.ctrl.enableGesture(gesture, this.id);\n      }\n    }\n    if (this.disableScroll) {\n      this.ctrl.enableScroll(this.id);\n    }\n  }\n  destroy() {\n    this.unblock();\n    this.ctrl = undefined;\n  }\n}\nconst BACKDROP_NO_SCROLL = 'backdrop-no-scroll';\nconst GESTURE_CONTROLLER = new GestureController();\n\nconst addEventListener = (el, eventName, callback, opts) => {\n  // use event listener options when supported\n  // otherwise it's just a boolean for the \"capture\" arg\n  const listenerOpts = supportsPassive(el) ? {\n    'capture': !!opts.capture,\n    'passive': !!opts.passive,\n  } : !!opts.capture;\n  let add;\n  let remove;\n  if (el['__zone_symbol__addEventListener']) {\n    add = '__zone_symbol__addEventListener';\n    remove = '__zone_symbol__removeEventListener';\n  }\n  else {\n    add = 'addEventListener';\n    remove = 'removeEventListener';\n  }\n  el[add](eventName, callback, listenerOpts);\n  return () => {\n    el[remove](eventName, callback, listenerOpts);\n  };\n};\nconst supportsPassive = (node) => {\n  if (_sPassive === undefined) {\n    try {\n      const opts = Object.defineProperty({}, 'passive', {\n        get: () => {\n          _sPassive = true;\n        }\n      });\n      node.addEventListener('optsTest', () => { return; }, opts);\n    }\n    catch (e) {\n      _sPassive = false;\n    }\n  }\n  return !!_sPassive;\n};\nlet _sPassive;\n\nconst MOUSE_WAIT = 2000;\nconst createPointerEvents = (el, pointerDown, pointerMove, pointerUp, options) => {\n  let rmTouchStart;\n  let rmTouchMove;\n  let rmTouchEnd;\n  let rmTouchCancel;\n  let rmMouseStart;\n  let rmMouseMove;\n  let rmMouseUp;\n  let lastTouchEvent = 0;\n  const handleTouchStart = (ev) => {\n    lastTouchEvent = Date.now() + MOUSE_WAIT;\n    if (!pointerDown(ev)) {\n      return;\n    }\n    if (!rmTouchMove && pointerMove) {\n      rmTouchMove = addEventListener(el, 'touchmove', pointerMove, options);\n    }\n    if (!rmTouchEnd) {\n      rmTouchEnd = addEventListener(el, 'touchend', handleTouchEnd, options);\n    }\n    if (!rmTouchCancel) {\n      rmTouchCancel = addEventListener(el, 'touchcancel', handleTouchEnd, options);\n    }\n  };\n  const handleMouseDown = (ev) => {\n    if (lastTouchEvent > Date.now()) {\n      return;\n    }\n    if (!pointerDown(ev)) {\n      return;\n    }\n    if (!rmMouseMove && pointerMove) {\n      rmMouseMove = addEventListener(getDocument(el), 'mousemove', pointerMove, options);\n    }\n    if (!rmMouseUp) {\n      rmMouseUp = addEventListener(getDocument(el), 'mouseup', handleMouseUp, options);\n    }\n  };\n  const handleTouchEnd = (ev) => {\n    stopTouch();\n    if (pointerUp) {\n      pointerUp(ev);\n    }\n  };\n  const handleMouseUp = (ev) => {\n    stopMouse();\n    if (pointerUp) {\n      pointerUp(ev);\n    }\n  };\n  const stopTouch = () => {\n    if (rmTouchMove) {\n      rmTouchMove();\n    }\n    if (rmTouchEnd) {\n      rmTouchEnd();\n    }\n    if (rmTouchCancel) {\n      rmTouchCancel();\n    }\n    rmTouchMove = rmTouchEnd = rmTouchCancel = undefined;\n  };\n  const stopMouse = () => {\n    if (rmMouseMove) {\n      rmMouseMove();\n    }\n    if (rmMouseUp) {\n      rmMouseUp();\n    }\n    rmMouseMove = rmMouseUp = undefined;\n  };\n  const stop = () => {\n    stopTouch();\n    stopMouse();\n  };\n  const enable = (isEnabled = true) => {\n    if (!isEnabled) {\n      if (rmTouchStart) {\n        rmTouchStart();\n      }\n      if (rmMouseStart) {\n        rmMouseStart();\n      }\n      rmTouchStart = rmMouseStart = undefined;\n      stop();\n    }\n    else {\n      if (!rmTouchStart) {\n        rmTouchStart = addEventListener(el, 'touchstart', handleTouchStart, options);\n      }\n      if (!rmMouseStart) {\n        rmMouseStart = addEventListener(el, 'mousedown', handleMouseDown, options);\n      }\n    }\n  };\n  const destroy = () => {\n    enable(false);\n    pointerUp = pointerMove = pointerDown = undefined;\n  };\n  return {\n    enable,\n    stop,\n    destroy\n  };\n};\nconst getDocument = (node) => {\n  return node instanceof Document ? node : node.ownerDocument;\n};\n\nconst createPanRecognizer = (direction, thresh, maxAngle) => {\n  const radians = maxAngle * (Math.PI / 180);\n  const isDirX = direction === 'x';\n  const maxCosine = Math.cos(radians);\n  const threshold = thresh * thresh;\n  let startX = 0;\n  let startY = 0;\n  let dirty = false;\n  let isPan = 0;\n  return {\n    start(x, y) {\n      startX = x;\n      startY = y;\n      isPan = 0;\n      dirty = true;\n    },\n    detect(x, y) {\n      if (!dirty) {\n        return false;\n      }\n      const deltaX = (x - startX);\n      const deltaY = (y - startY);\n      const distance = deltaX * deltaX + deltaY * deltaY;\n      if (distance < threshold) {\n        return false;\n      }\n      const hypotenuse = Math.sqrt(distance);\n      const cosine = (isDirX ? deltaX : deltaY) / hypotenuse;\n      if (cosine > maxCosine) {\n        isPan = 1;\n      }\n      else if (cosine < -maxCosine) {\n        isPan = -1;\n      }\n      else {\n        isPan = 0;\n      }\n      dirty = false;\n      return true;\n    },\n    isGesture() {\n      return isPan !== 0;\n    },\n    getDirection() {\n      return isPan;\n    }\n  };\n};\n\nconst createGesture = (config) => {\n  let hasCapturedPan = false;\n  let hasStartedPan = false;\n  let hasFiredStart = true;\n  let isMoveQueued = false;\n  const finalConfig = Object.assign({ disableScroll: false, direction: 'x', gesturePriority: 0, passive: true, maxAngle: 40, threshold: 10 }, config);\n  const canStart = finalConfig.canStart;\n  const onWillStart = finalConfig.onWillStart;\n  const onStart = finalConfig.onStart;\n  const onEnd = finalConfig.onEnd;\n  const notCaptured = finalConfig.notCaptured;\n  const onMove = finalConfig.onMove;\n  const threshold = finalConfig.threshold;\n  const passive = finalConfig.passive;\n  const blurOnStart = finalConfig.blurOnStart;\n  const detail = {\n    type: 'pan',\n    startX: 0,\n    startY: 0,\n    startTime: 0,\n    currentX: 0,\n    currentY: 0,\n    velocityX: 0,\n    velocityY: 0,\n    deltaX: 0,\n    deltaY: 0,\n    currentTime: 0,\n    event: undefined,\n    data: undefined\n  };\n  const pan = createPanRecognizer(finalConfig.direction, finalConfig.threshold, finalConfig.maxAngle);\n  const gesture = GESTURE_CONTROLLER.createGesture({\n    name: config.gestureName,\n    priority: config.gesturePriority,\n    disableScroll: config.disableScroll\n  });\n  const pointerDown = (ev) => {\n    const timeStamp = now(ev);\n    if (hasStartedPan || !hasFiredStart) {\n      return false;\n    }\n    updateDetail(ev, detail);\n    detail.startX = detail.currentX;\n    detail.startY = detail.currentY;\n    detail.startTime = detail.currentTime = timeStamp;\n    detail.velocityX = detail.velocityY = detail.deltaX = detail.deltaY = 0;\n    detail.event = ev;\n    // Check if gesture can start\n    if (canStart && canStart(detail) === false) {\n      return false;\n    }\n    // Release fallback\n    gesture.release();\n    // Start gesture\n    if (!gesture.start()) {\n      return false;\n    }\n    hasStartedPan = true;\n    if (threshold === 0) {\n      return tryToCapturePan();\n    }\n    pan.start(detail.startX, detail.startY);\n    return true;\n  };\n  const pointerMove = (ev) => {\n    // fast path, if gesture is currently captured\n    // do minimum job to get user-land even dispatched\n    if (hasCapturedPan) {\n      if (!isMoveQueued && hasFiredStart) {\n        isMoveQueued = true;\n        calcGestureData(detail, ev);\n        requestAnimationFrame(fireOnMove);\n      }\n      return;\n    }\n    // gesture is currently being detected\n    calcGestureData(detail, ev);\n    if (pan.detect(detail.currentX, detail.currentY)) {\n      if (!pan.isGesture() || !tryToCapturePan()) {\n        abortGesture();\n      }\n    }\n  };\n  const fireOnMove = () => {\n    // Since fireOnMove is called inside a RAF, onEnd() might be called,\n    // we must double check hasCapturedPan\n    if (!hasCapturedPan) {\n      return;\n    }\n    isMoveQueued = false;\n    if (onMove) {\n      onMove(detail);\n    }\n  };\n  const tryToCapturePan = () => {\n    if (gesture && !gesture.capture()) {\n      return false;\n    }\n    hasCapturedPan = true;\n    hasFiredStart = false;\n    // reset start position since the real user-land event starts here\n    // If the pan detector threshold is big, not resetting the start position\n    // will cause a jump in the animation equal to the detector threshold.\n    // the array of positions used to calculate the gesture velocity does not\n    // need to be cleaned, more points in the positions array always results in a\n    // more accurate value of the velocity.\n    detail.startX = detail.currentX;\n    detail.startY = detail.currentY;\n    detail.startTime = detail.currentTime;\n    if (onWillStart) {\n      onWillStart(detail).then(fireOnStart);\n    }\n    else {\n      fireOnStart();\n    }\n    return true;\n  };\n  const blurActiveElement = () => {\n    /* tslint:disable-next-line */\n    if (typeof document !== 'undefined') {\n      const activeElement = document.activeElement;\n      if (activeElement !== null && activeElement.blur) {\n        activeElement.blur();\n      }\n    }\n  };\n  const fireOnStart = () => {\n    if (blurOnStart) {\n      blurActiveElement();\n    }\n    if (onStart) {\n      onStart(detail);\n    }\n    hasFiredStart = true;\n  };\n  const reset = () => {\n    hasCapturedPan = false;\n    hasStartedPan = false;\n    isMoveQueued = false;\n    hasFiredStart = true;\n    gesture.release();\n  };\n  // END *************************\n  const pointerUp = (ev) => {\n    const tmpHasCaptured = hasCapturedPan;\n    const tmpHasFiredStart = hasFiredStart;\n    reset();\n    if (!tmpHasFiredStart) {\n      return;\n    }\n    calcGestureData(detail, ev);\n    // Try to capture press\n    if (tmpHasCaptured) {\n      if (onEnd) {\n        onEnd(detail);\n      }\n      return;\n    }\n    // Not captured any event\n    if (notCaptured) {\n      notCaptured(detail);\n    }\n  };\n  const pointerEvents = createPointerEvents(finalConfig.el, pointerDown, pointerMove, pointerUp, {\n    capture: false,\n    passive\n  });\n  const abortGesture = () => {\n    reset();\n    pointerEvents.stop();\n    if (notCaptured) {\n      notCaptured(detail);\n    }\n  };\n  return {\n    enable(enable = true) {\n      if (!enable) {\n        if (hasCapturedPan) {\n          pointerUp(undefined);\n        }\n        reset();\n      }\n      pointerEvents.enable(enable);\n    },\n    destroy() {\n      gesture.destroy();\n      pointerEvents.destroy();\n    }\n  };\n};\nconst calcGestureData = (detail, ev) => {\n  if (!ev) {\n    return;\n  }\n  const prevX = detail.currentX;\n  const prevY = detail.currentY;\n  const prevT = detail.currentTime;\n  updateDetail(ev, detail);\n  const currentX = detail.currentX;\n  const currentY = detail.currentY;\n  const timestamp = detail.currentTime = now(ev);\n  const timeDelta = timestamp - prevT;\n  if (timeDelta > 0 && timeDelta < 100) {\n    const velocityX = (currentX - prevX) / timeDelta;\n    const velocityY = (currentY - prevY) / timeDelta;\n    detail.velocityX = velocityX * 0.7 + detail.velocityX * 0.3;\n    detail.velocityY = velocityY * 0.7 + detail.velocityY * 0.3;\n  }\n  detail.deltaX = currentX - detail.startX;\n  detail.deltaY = currentY - detail.startY;\n  detail.event = ev;\n};\nconst updateDetail = (ev, detail) => {\n  // get X coordinates for either a mouse click\n  // or a touch depending on the given event\n  let x = 0;\n  let y = 0;\n  if (ev) {\n    const changedTouches = ev.changedTouches;\n    if (changedTouches && changedTouches.length > 0) {\n      const touch = changedTouches[0];\n      x = touch.clientX;\n      y = touch.clientY;\n    }\n    else if (ev.pageX !== undefined) {\n      x = ev.pageX;\n      y = ev.pageY;\n    }\n  }\n  detail.currentX = x;\n  detail.currentY = y;\n};\nconst now = (ev) => {\n  return ev.timeStamp || Date.now();\n};\n\nexport { GESTURE_CONTROLLER, createGesture };\n"],"sourceRoot":""}
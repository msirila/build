{"version":3,"sources":["../node_modules/@larva.io/webcomponents/dist/esm/lar-inner-range-area.entry.js"],"names":["InnerRangeArea","hostRef","registerInstance","this","output","createEvent","request","icon","color","allowIndicationAutoColoring","allowNodeAutoColoring","log","armed","alarm","loading","data","a","node","error","State","el","shadowRoot","querySelector","emit","command","h","value","hideTitles","iconSmall","colorIconSmall","supTitle","mainTitle","subTitle","colorModal","colorInputs","onClick","armDisarm","t","getElement","style"],"mappings":"uQAIMA,EAAc,WAClB,WAAYC,GAAS,oBACnBC,YAAiBC,KAAMF,GACvBE,KAAKC,OAASC,YAAYF,KAAM,SAAU,GAC1CA,KAAKG,QAAUD,YAAYF,KAAM,UAAW,GAK5CA,KAAKI,KAAO,WAKZJ,KAAKK,MAAQ,UAIbL,KAAKM,6BAA8B,EAInCN,KAAKO,uBAAwB,EAI7BP,KAAKQ,KAAM,EAEXR,KAAKS,OAAQ,EACbT,KAAKU,OAAQ,EACbV,KAAKW,SAAU,EA9BC,gFAmClB,WAAYC,GAAZ,SAAAC,EAAA,sDACMb,KAAKc,MACPd,KAAKc,KAAKC,MAAMH,GAElBZ,KAAKW,SAAU,EAJjB,gDAnCkB,iHA4ClB,WAAYC,GAAZ,SAAAC,EAAA,sDACMD,GAAQA,EAAKI,QACfhB,KAAKS,MAAuB,UAAfG,EAAKI,MAClBhB,KAAKW,SAAU,GAHnB,gDA5CkB,qFAkDlB,WACE,IAAMM,EAAKjB,KAAKiB,GAAGC,YAAclB,KAAKiB,GACtCjB,KAAKc,KAAOG,EAAGE,cAAc,YAC7BnB,KAAKW,SAAU,EACfX,KAAKC,OAAOmB,SAtDI,uBAwDlB,WACE,IAAqB,IAAjBpB,KAAKW,QAEP,OADAX,KAAKW,SAAU,EACRX,KAAKC,OAAOmB,KAAK,CAAEC,QAASrB,KAAKS,MAAQ,SAAW,UA3D7C,oBA8DlB,WAAS,WACP,MAAO,CACLa,YAAE,WAAY,CAAEC,MAAOvB,KAAKS,MAAQ,aAAe,gBAAiBe,WAAYxB,KAAKwB,WAAYC,UAAWzB,KAAKS,MAAQ,OAAS,SAAUL,KAAMJ,KAAKI,KAAMsB,eAAgB1B,KAAKU,QAA8C,IAArCV,KAAKM,4BAAuC,SAAWN,KAAK0B,eAAgBrB,MAAOL,KAAKU,QAAwC,IAA/BV,KAAKO,sBAAiC,SAAWP,KAAKK,MAAOsB,SAAU3B,KAAK2B,SAAUC,UAAW5B,KAAK4B,UAAWC,SAAU7B,KAAK6B,SAAUC,WAAY9B,KAAKU,QAAwC,IAA/BV,KAAKO,sBAAiC,SAAWP,KAAK8B,WAAYC,YAAa/B,KAAK+B,YAAavB,IAAKR,KAAKQ,IAAKG,QAASX,KAAKW,SAAWW,YAAE,aAAc,CAAEU,QAAS,kBAAM,EAAKC,aAAa5B,MAAOL,KAAK+B,aAAe/B,KAAKK,OAASL,KAAKS,MACtqB,CAACa,YAAE,WAAY,CAAElB,KAAM,WAAakB,YAAE,gBAAiB,CAAEY,EAAG,iBAC5D,CAACZ,YAAE,WAAY,CAAElB,KAAM,SAAWkB,YAAE,gBAAiB,CAAEY,EAAG,mBAlEhD,cAqElB,WAAW,OAAOC,YAAWnC,UArEX,KAuEpBH,EAAeuC,MAzEW","file":"static/js/37.a8785c47.chunk.js","sourcesContent":["import { r as registerInstance, c as createEvent, h, g as getElement } from './index-0f1831ce.js';\n\nconst innerRangeAreaCss = \"\";\n\nconst InnerRangeArea = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.output = createEvent(this, \"output\", 7);\n    this.request = createEvent(this, \"request\", 7);\n    /////// LarvaNode base properties\n    /**\n     * Component main icon\n     */\n    this.icon = 'security';\n    /**\n     * The color to use from your application's color palette.\n     * Detrouble options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\n     */\n    this.color = 'primary';\n    /**\n     * Allow node indication color automatic change based on feedback/node value. Defaults to false\n     */\n    this.allowIndicationAutoColoring = false;\n    /**\n     * Allow node color automatic change based on feedback/node value. Defaults to true\n     */\n    this.allowNodeAutoColoring = true;\n    /**\n     * Is logging for this component enabled (lar-log subcomponent loaded)\n     */\n    this.log = false;\n    /////// LarvaNode base properties and events - end\n    this.armed = false;\n    this.alarm = false;\n    this.loading = true;\n  }\n  /**\n   * Larva error input\n   */\n  async error(data) {\n    if (this.node) {\n      this.node.error(data);\n    }\n    this.loading = false;\n  }\n  /**\n   * Larva input message\n   */\n  async input(data) {\n    if (data && data.State) {\n      this.armed = data.State === 'Armed';\n      this.loading = false;\n    }\n  }\n  componentDidLoad() {\n    const el = this.el.shadowRoot || this.el;\n    this.node = el.querySelector('lar-node');\n    this.loading = true;\n    this.output.emit();\n  }\n  armDisarm() {\n    if (this.loading === false) {\n      this.loading = true;\n      return this.output.emit({ command: this.armed ? 'disarm' : 'arm' });\n    }\n  }\n  render() {\n    return [\n      h(\"lar-node\", { value: this.armed ? 'area.armed' : 'area.disarmed', hideTitles: this.hideTitles, iconSmall: this.armed ? 'lock' : 'unlock', icon: this.icon, colorIconSmall: this.alarm && this.allowIndicationAutoColoring === true ? 'danger' : this.colorIconSmall, color: this.alarm && this.allowNodeAutoColoring === true ? 'danger' : this.color, supTitle: this.supTitle, mainTitle: this.mainTitle, subTitle: this.subTitle, colorModal: this.alarm && this.allowNodeAutoColoring === true ? 'danger' : this.colorModal, colorInputs: this.colorInputs, log: this.log, loading: this.loading }, h(\"lar-button\", { onClick: () => this.armDisarm(), color: this.colorInputs || this.color }, this.armed\n        ? [h(\"lar-icon\", { icon: \"unlock\" }), h(\"lar-translate\", { t: \"area.disarm\" })]\n        : [h(\"lar-icon\", { icon: \"lock\" }), h(\"lar-translate\", { t: \"area.arm\" })]))\n    ];\n  }\n  get el() { return getElement(this); }\n};\nInnerRangeArea.style = innerRangeAreaCss;\n\nexport { InnerRangeArea as lar_inner_range_area };\n"],"sourceRoot":""}
{"version":3,"sources":["../node_modules/@larva.io/webcomponents-cognito-login/dist/esm/lar-cognito-password-recovery_2.entry.js","../node_modules/@larva.io/webcomponents-cognito-login/dist/esm/types-2fd4e977.js"],"names":["CognitoPasswordRecovery","hostRef","registerInstance","this","back","createEvent","recoveryDone","recoveryError","loading","showBack","backText","continueText","changeText","newPasswordText","confirmPasswordText","passwordText","usernameText","codeText","enterCoreText","submitButtonColor","backButtonColor","cognitoUsernameAttribute","disableUsername","state","LoginState","PASSWORD_RECOVERY_USERNAME","loadingState","newValue","usernameInternal","a","username","emit","setLoading","Auth","forgotPassword","data","CodeDeliveryDetails","deliveryMedium","DeliveryMedium","destination","Destination","PASSWORD_RECOVERY_PASSWORD","Error","message","passwordFirst","passwordSecond","forgotPasswordSubmit","recoveryCode","login","signIn","h","onSubmit","e","preventDefault","startRecovery","label","type","value","disabled","onUsernameInput","event","target","color","onClick","undefined","finishRecovery","onInput","autocomplete","changeState","renderState","style","CognitoInput","id","el","getAttribute","Math","random","toString","substring","class","checked","for","getElement"],"mappings":"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","file":"static/js/23.f710f022.chunk.js","sourcesContent":["import { r as registerInstance, c as createEvent, h, g as getElement } from './index-5d998995.js';\nimport { A as Auth } from './Auth-19d9fec4.js';\nimport { L as LoginState } from './types-2fd4e977.js';\n\nconst cognitoPasswordRecoveryCss = \"lar-cognito-button.sc-lar-cognito-password-recovery:first-of-type{display:block;margin-top:1rem}p.sc-lar-cognito-password-recovery{text-align:center}\";\n\nconst CognitoPasswordRecovery = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.back = createEvent(this, \"back\", 7);\n    this.recoveryDone = createEvent(this, \"recoveryDone\", 7);\n    this.recoveryError = createEvent(this, \"recoveryError\", 7);\n    this.loading = createEvent(this, \"loading\", 7);\n    this.showBack = false;\n    this.backText = 'Back';\n    this.continueText = 'Continue';\n    this.changeText = 'Change';\n    this.newPasswordText = 'New Password';\n    this.confirmPasswordText = 'Confirm Password';\n    this.passwordText = 'Password';\n    this.usernameText = 'Username';\n    this.codeText = 'Code';\n    this.enterCoreText = 'Please enter code and new password. Code sent to:';\n    this.submitButtonColor = 'primary';\n    this.backButtonColor = 'dark';\n    /**\n     * Cognito Username Atttribute\n     */\n    this.cognitoUsernameAttribute = 'any';\n    this.disableUsername = false;\n    this.state = LoginState.PASSWORD_RECOVERY_USERNAME;\n    this.loadingState = false;\n  }\n  updateUsername(newValue) {\n    // tslint:disable-next-line: strict-boolean-conditions\n    if (newValue) {\n      this.usernameInternal = newValue;\n    }\n  }\n  async componentWillLoad() {\n    // tslint:disable-next-line: strict-boolean-conditions\n    if (this.username) {\n      this.usernameInternal = this.username;\n    }\n  }\n  async isLoading() {\n    return this.loadingState;\n  }\n  setLoading(loading) {\n    this.loadingState = loading;\n    this.loading.emit(loading);\n  }\n  async startRecovery() {\n    try {\n      this.setLoading(true);\n      const data = await Auth.forgotPassword(this.usernameInternal);\n      if (data && data.CodeDeliveryDetails) {\n        this.deliveryMedium = data.CodeDeliveryDetails.DeliveryMedium;\n        this.destination = data.CodeDeliveryDetails.Destination;\n        this.state = LoginState.PASSWORD_RECOVERY_PASSWORD;\n      }\n      else {\n        throw new Error('Invalid response');\n      }\n    }\n    catch (err) {\n      this.recoveryError.emit(err.message);\n    }\n    finally {\n      this.setLoading(false);\n    }\n  }\n  async finishRecovery() {\n    try {\n      this.setLoading(true);\n      if (this.passwordFirst !== this.passwordSecond) {\n        throw new Error(`Passwords don't match`);\n      }\n      await Auth.forgotPasswordSubmit(this.usernameInternal, this.recoveryCode, this.passwordFirst);\n      // Login successful\n      await this.login();\n    }\n    catch (err) {\n      this.recoveryError.emit(err.message);\n    }\n    finally {\n      this.setLoading(false);\n    }\n  }\n  async login() {\n    try {\n      this.setLoading(true);\n      // tslint:disable-next-line: strict-boolean-conditions\n      if (!this.usernameInternal || !this.passwordFirst) {\n        this.recoveryError.emit('Incorrect usernameInternal or password');\n        return;\n      }\n      await Auth.signIn(this.usernameInternal, this.passwordFirst);\n      this.recoveryDone.emit(this.usernameInternal);\n    }\n    catch (err) {\n      this.recoveryError.emit(err.message);\n    }\n    finally {\n      this.setLoading(false);\n    }\n  }\n  changeState(state) {\n    this.state = state;\n  }\n  renderState() {\n    switch (this.state) {\n      case LoginState.PASSWORD_RECOVERY_USERNAME: {\n        return (h(\"form\", { onSubmit: async (e) => { e.preventDefault(); await this.startRecovery(); } }, h(\"lar-cognito-username-input\", { label: this.usernameText, type: this.cognitoUsernameAttribute, value: this.usernameInternal, disabled: this.disableUsername, onUsernameInput: (event) => { this.usernameInternal = event.target.value; } }), this.showBack ? (h(\"lar-cognito-button\", { type: \"button\", color: this.backButtonColor, onClick: event => this.back.emit(event) }, this.backText)) : undefined, h(\"lar-cognito-button\", { type: \"submit\", color: this.submitButtonColor, disabled: this.loadingState || !this.usernameInternal }, this.continueText)));\n      }\n      case LoginState.PASSWORD_RECOVERY_PASSWORD: {\n        return (h(\"form\", { onSubmit: async (e) => { e.preventDefault(); await this.finishRecovery(); } }, h(\"p\", null, this.enterCoreText, \" \", this.destination, \" (\", this.deliveryMedium, \")\"), h(\"lar-cognito-input\", { label: this.codeText, type: \"text\", value: this.recoveryCode, onInput: (event) => (this.recoveryCode = event.target.value) }), h(\"lar-cognito-input\", { type: \"password\", label: this.newPasswordText, autocomplete: \"new-password\", value: this.passwordFirst, onInput: (event) => (this.passwordFirst = event.target.value) }), h(\"lar-cognito-input\", { type: \"password\", label: this.confirmPasswordText, autocomplete: \"new-password\", value: this.passwordSecond, onInput: (event) => (this.passwordSecond = event.target.value) }), h(\"lar-cognito-button\", { type: \"button\", color: this.backButtonColor, onClick: () => this.changeState(LoginState.PASSWORD_RECOVERY_USERNAME) }, this.backText), h(\"lar-cognito-button\", { type: \"submit\", color: this.submitButtonColor, disabled: this.loadingState || !this.recoveryCode || !this.passwordFirst || !this.passwordSecond }, this.changeText)));\n      }\n      default: {\n        return h(\"div\", null, \"No state\");\n      }\n    }\n  }\n  render() {\n    return h(\"div\", null, this.renderState());\n  }\n  static get watchers() { return {\n    \"username\": [\"updateUsername\"]\n  }; }\n};\nCognitoPasswordRecovery.style = cognitoPasswordRecoveryCss;\n\nconst cognitoRadioCss = \".default.sc-lar-cognito-radio,.default.sc-lar-cognito-radio label.sc-lar-cognito-radio{margin-left:0.2rem}.default.sc-lar-cognito-radio label.sc-lar-cognito-radio{margin-left:0.2rem}\";\n\nconst CognitoInput = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  render() {\n    const GroupTagName = 'div';\n    const LabelTagName = 'label';\n    const InputTagName = 'input';\n    // tslint:disable-next-line: strict-boolean-conditions\n    const id = this.el.getAttribute('id') ? this.el.getAttribute('id') : `lar-id-${Math.random().toString(36).substring(8)}`;\n    return (h(GroupTagName, { class: \"default\" }, h(InputTagName, { id: id, type: \"radio\", checked: this.checked, disabled: this.disabled, value: this.value }), h(LabelTagName, { for: id }, this.label)));\n  }\n  get el() { return getElement(this); }\n};\nCognitoInput.style = cognitoRadioCss;\n\nexport { CognitoPasswordRecovery as lar_cognito_password_recovery, CognitoInput as lar_cognito_radio };\n","var LoginState;\n(function (LoginState) {\n  LoginState[LoginState[\"PASSWORD_RECOVERY_USERNAME\"] = 0] = \"PASSWORD_RECOVERY_USERNAME\";\n  LoginState[LoginState[\"PASSWORD_RECOVERY_PASSWORD\"] = 1] = \"PASSWORD_RECOVERY_PASSWORD\";\n  LoginState[LoginState[\"USER_LOGIN\"] = 2] = \"USER_LOGIN\";\n  LoginState[LoginState[\"NEW_PASSWORD\"] = 3] = \"NEW_PASSWORD\";\n  LoginState[LoginState[\"MFA\"] = 4] = \"MFA\";\n  LoginState[LoginState[\"VERIFICATION\"] = 5] = \"VERIFICATION\";\n  LoginState[LoginState[\"VERIFICATION_CODE\"] = 6] = \"VERIFICATION_CODE\";\n})(LoginState || (LoginState = {}));\n\nexport { LoginState as L };\n"],"sourceRoot":""}
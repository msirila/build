{"version":3,"sources":["../node_modules/@larva.io/webcomponents-cognito-login/dist/esm/lar-cognito-config.entry.js"],"names":["CognitoConfig","hostRef","registerInstance","this","logoutDone","createEvent","storageType","a","configure","Auth","currentSession","session","getAccessToken","getJwtToken","console","error","storage","config","Object","assign","global","signOut","emit","currentPassword","newPassword","currentAuthenticatedUser","user","changePassword","region","cognitoRegion","userPoolId","cognitoPoolId","userPoolWebClientId","cognitoClientId","window","localStorage","sessionStorage","message","style"],"mappings":"+QAKMA,EAAa,WACjB,WAAYC,GAAS,oBACnBC,YAAiBC,KAAMF,GACvBE,KAAKC,WAAaC,YAAYF,KAAM,aAAc,GAIlDA,KAAKG,YAAc,UAPJ,yFASjB,4BAAAC,EAAA,+EAEUJ,KAAKK,YAFf,uBAG0BC,IAAKC,iBAH/B,cAGUC,EAHV,yBAIWA,EAAQC,iBAAiBC,eAJpC,uCAQIC,QAAQC,MAAR,MARJ,kBAUW,MAVX,yDATiB,qHAyBjB,WAAiBC,GAAjB,SAAAT,EAAA,6DACEJ,KAAKc,OAASC,OAAOC,OAAOD,OAAOC,OAAO,GAAIhB,KAAKc,QAAS,CAAED,YADhE,SAEQb,KAAKK,YAFb,gDAzBiB,kHA6BjB,wCAAAD,EAAA,6DAAaa,EAAb,yCACQjB,KAAKK,YADb,gCAGUC,IAAKY,QAAQ,CAAED,WAHzB,OAIIjB,KAAKC,WAAWkB,OAJpB,gDAQIR,QAAQC,MAAR,MARJ,yDA7BiB,yHAwCjB,WAAqBQ,EAAiBC,GAAtC,eAAAjB,EAAA,sEACqBE,IAAKgB,2BAD1B,cACQC,EADR,yBAESjB,IAAKkB,eAAeD,EAAMH,EAAiBC,IAFpD,2CAxCiB,+HA4CjB,sBAAAjB,EAAA,6DACEJ,KAAKc,OAAS,CACZW,OAAQzB,KAAK0B,cACbC,WAAY3B,KAAK4B,cACjBC,oBAAqB7B,KAAK8B,gBAC1BjB,QAA8B,UAArBb,KAAKG,YAA0B4B,OAAOC,aAAeD,OAAOE,gBALzE,kBAQUjC,KAAKK,YARf,sDAYIM,QAAQC,MAAM,+BAAgC,KAAIsB,SAZtD,wDA5CiB,oHA2DjB,sBAAA9B,EAAA,+EACSE,IAAKD,UAAUL,KAAKc,SAD7B,gDA3DiB,6DA+DnBjB,EAAcsC,MAjEW","file":"static/js/30.c91b9ef9.chunk.js","sourcesContent":["import { r as registerInstance, c as createEvent } from './index-5d998995.js';\nimport { A as Auth } from './Auth-19d9fec4.js';\n\nconst cognitoConfigCss = \"\";\n\nconst CognitoConfig = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.logoutDone = createEvent(this, \"logoutDone\", 7);\n    /**\n     * The storage type (local or session)\n     */\n    this.storageType = 'session';\n  }\n  async getAccessToken() {\n    try {\n      await this.configure();\n      const session = await Auth.currentSession();\n      return session.getAccessToken().getJwtToken();\n    }\n    catch (err) {\n      // tslint:disable-next-line: no-console\n      console.error(err);\n      // tslint:disable-next-line: no-null-keyword\n      return null;\n    }\n  }\n  /**\n   * Override storage with custom storage\n   */\n  async setStorage(storage) {\n    this.config = Object.assign(Object.assign({}, this.config), { storage });\n    await this.configure();\n  }\n  async logout(global = false) {\n    await this.configure();\n    try {\n      await Auth.signOut({ global }); // 'global' also invalidates all tokens server-side\n      this.logoutDone.emit();\n    }\n    catch (err) {\n      // tslint:disable-next-line: no-console\n      console.error(err);\n    }\n  }\n  async changePassword(currentPassword, newPassword) {\n    const user = await Auth.currentAuthenticatedUser();\n    return Auth.changePassword(user, currentPassword, newPassword);\n  }\n  async componentWillLoad() {\n    this.config = {\n      region: this.cognitoRegion,\n      userPoolId: this.cognitoPoolId,\n      userPoolWebClientId: this.cognitoClientId,\n      storage: this.storageType === 'local' ? window.localStorage : window.sessionStorage,\n    };\n    try {\n      await this.configure();\n    }\n    catch (err) {\n      // tslint:disable-next-line: no-console\n      console.error('Could not configure Cognito:', err.message);\n    }\n  }\n  async configure() {\n    return Auth.configure(this.config);\n  }\n};\nCognitoConfig.style = cognitoConfigCss;\n\nexport { CognitoConfig as lar_cognito_config };\n"],"sourceRoot":""}
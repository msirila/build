{"version":3,"sources":["../node_modules/@larva.io/webcomponents/dist/esm/lar-door.entry.js"],"names":["Door","hostRef","registerInstance","this","output","createEvent","request","icon","color","disableQuickActions","allowIndicationAutoColoring","log","doorType","loading","buzzingState","data","a","isOpen","state","node","error","el","shadowRoot","querySelector","emit","command","cmd","h","value","colorIconSmall","hideTitles","iconSmall","supTitle","mainTitle","subTitle","colorModal","colorInputs","size","slot","disabled","onClick","handleChange","t","getElement","style"],"mappings":"2PAIMA,EAAI,WACR,WAAYC,GAAS,oBACnBC,YAAiBC,KAAMF,GACvBE,KAAKC,OAASC,YAAYF,KAAM,SAAU,GAC1CA,KAAKG,QAAUD,YAAYF,KAAM,UAAW,GAK5CA,KAAKI,KAAO,OAKZJ,KAAKK,MAAQ,UAIbL,KAAKM,qBAAsB,EAK3BN,KAAKO,6BAA8B,EAInCP,KAAKQ,KAAM,EAEXR,KAAKS,SAAW,OAChBT,KAAKU,SAAU,EAEfV,KAAKW,cAAe,EAhCd,gFAqCR,WAAYC,GAAZ,SAAAC,EAAA,sDACEb,KAAKc,OAASF,EAAKG,QAAS,EACxBf,KAAKW,eAAiBX,KAAKc,SAC7Bd,KAAKW,cAAe,GAElBC,EAAKH,WACPT,KAAKS,SAAWG,EAAKH,UAEvBT,KAAKU,SAAU,EARjB,gDArCQ,iHAkDR,WAAYE,GAAZ,SAAAC,EAAA,sDACMb,KAAKgB,MACPhB,KAAKgB,KAAKC,MAAML,GAElBZ,KAAKU,SAAU,EAJjB,gDAlDQ,qFAwDR,WACE,IAAMQ,EAAKlB,KAAKkB,GAAGC,YAAcnB,KAAKkB,GACtClB,KAAKgB,KAAOE,EAAGE,cAAc,YAC7BpB,KAAKU,SAAU,EACfV,KAAKC,OAAOoB,KAAK,CAAEC,QAAS,gBA5DtB,0BA8DR,WACE,GAAItB,KAAKU,SAAWV,KAAKW,aACvB,OAAOX,KAAKgB,KAAKC,MAAM,sBAEzBjB,KAAKU,SAAU,EACf,IAAMa,EAAM,CACVD,QAA2B,SAAlBtB,KAAKS,SAAsB,OAAST,KAAKc,OAAS,OAAS,UAKtE,MAHsB,SAAlBd,KAAKS,WACPT,KAAKW,cAAe,GAEfX,KAAKC,OAAOoB,KAAKE,KAzElB,oBA2ER,WAAS,WACP,MAAO,CACLC,YAAE,WAAY,CAAEC,MAAOzB,KAAKc,OAAS,gBAAkB,cAAeY,eAAgB1B,KAAKO,8BAAgCP,KAAKU,QAAWV,KAAKc,OAAS,SAAW,UAAad,KAAK0B,eAAgBC,WAAY3B,KAAK2B,WAAYC,UAAW5B,KAAKc,OAAS,SAAW,OAAQV,KAAMJ,KAAKI,KAAMC,MAAOL,KAAKK,MAAOwB,SAAU7B,KAAK6B,SAAUC,UAAW9B,KAAK8B,UAAWC,SAAU/B,KAAK+B,SAAUC,WAAYhC,KAAKgC,WAAYC,YAAajC,KAAKiC,YAAazB,IAAKR,KAAKQ,IAAKE,QAASV,KAAKU,UAAwC,IAA7BV,KAAKM,qBACvekB,YAAE,kBAAmB,CAAEU,KAAM,QAASC,KAAM,SAAU9B,MAAOL,KAAKiC,aAAejC,KAAKK,MAAO+B,SAAUpC,KAAKU,UAAiC,IAAtBV,KAAKW,aAAuB0B,QAAS,kBAAM,EAAKC,kBAAmBd,YAAE,aAAc,CAAEY,SAAUpC,KAAKU,UAAiC,IAAtBV,KAAKW,aAAuB0B,QAAS,kBAAM,EAAKC,gBAAgBjC,MAAOL,KAAKiC,aAAejC,KAAKK,OAASmB,YAAE,gBAAiB,CAAEe,EAAqB,SAAlBvC,KAAKS,SACxW,gBACAT,KAAKc,OACH,YACA,qBAlFJ,cAqFR,WAAW,OAAO0B,YAAWxC,UArFrB,KAuFVH,EAAK4C,MAzFW","file":"static/js/29.1000b5c8.chunk.js","sourcesContent":["import { r as registerInstance, c as createEvent, h, g as getElement } from './index-0f1831ce.js';\n\nconst doorCss = \"\";\n\nconst Door = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.output = createEvent(this, \"output\", 7);\n    this.request = createEvent(this, \"request\", 7);\n    /////// LarvaNode base properties\n    /**\n     * Component main icon\n     */\n    this.icon = 'door';\n    /**\n     * The color to use from your application's color palette.\n     * Detrouble options are: `\"primary\"`, `\"secondary\"`, `\"tertiary\"`, `\"success\"`, `\"warning\"`, `\"danger\"`, `\"light\"`, `\"medium\"`, and `\"dark\"`.\n     */\n    this.color = 'primary';\n    /**\n   * Disable quck actions\n   */\n    this.disableQuickActions = false;\n    /**\n    /**\n     * Allow node indication color automatic change based on feedback/node value. Defaults to false\n     */\n    this.allowIndicationAutoColoring = false;\n    /**\n     * Is logging for this component enabled (lar-log subcomponent loaded)\n     */\n    this.log = false;\n    /////// LarvaNode base properties and events - end\n    this.doorType = 'buzz';\n    this.loading = true;\n    // state for indicating buzzer door open state\n    this.buzzingState = false;\n  }\n  /**\n   * Larva input message\n   */\n  async input(data) {\n    this.isOpen = data.state || false;\n    if (this.buzzingState && !this.isOpen) {\n      this.buzzingState = false;\n    }\n    if (data.doorType) {\n      this.doorType = data.doorType;\n    }\n    this.loading = false;\n  }\n  /**\n   * Larva error input\n   */\n  async error(data) {\n    if (this.node) {\n      this.node.error(data);\n    }\n    this.loading = false;\n  }\n  componentDidLoad() {\n    const el = this.el.shadowRoot || this.el;\n    this.node = el.querySelector('lar-node');\n    this.loading = true;\n    this.output.emit({ command: 'fullstate' });\n  }\n  handleChange() {\n    if (this.loading || this.buzzingState) {\n      return this.node.error('invalid door state');\n    }\n    this.loading = true;\n    const cmd = {\n      command: this.doorType === 'buzz' ? 'buzz' : this.isOpen ? 'lock' : 'unlock'\n    };\n    if (this.doorType === 'buzz') {\n      this.buzzingState = true;\n    }\n    return this.output.emit(cmd);\n  }\n  render() {\n    return [\n      h(\"lar-node\", { value: this.isOpen ? 'door.unlocked' : 'door.locked', colorIconSmall: this.allowIndicationAutoColoring && !this.loading ? (this.isOpen ? 'danger' : 'success') : this.colorIconSmall, hideTitles: this.hideTitles, iconSmall: this.isOpen ? 'unlock' : 'lock', icon: this.icon, color: this.color, supTitle: this.supTitle, mainTitle: this.mainTitle, subTitle: this.subTitle, colorModal: this.colorModal, colorInputs: this.colorInputs, log: this.log, loading: this.loading }, this.disableQuickActions === false &&\n        h(\"lar-button-push\", { size: \"small\", slot: \"titles\", color: this.colorInputs || this.color, disabled: this.loading || this.buzzingState === true, onClick: () => this.handleChange() }), h(\"lar-button\", { disabled: this.loading || this.buzzingState === true, onClick: () => this.handleChange(), color: this.colorInputs || this.color }, h(\"lar-translate\", { t: this.doorType === 'buzz'\n          ? 'door.buzzOpen'\n          : this.isOpen\n            ? 'door.lock'\n            : 'door.unlock' })))\n    ];\n  }\n  get el() { return getElement(this); }\n};\nDoor.style = doorCss;\n\nexport { Door as lar_door };\n"],"sourceRoot":""}